local NeuralNetworkLib = require 'NeuralNetwork'
local logicGatesLib = require 'logicGates'
local a = {3,5,7,3}
print(a[2])
NeuralNetworkLib.build({3,5,7,3})
local i
for i  =1 , 3 do
    local layer_temp = NeuralNetworkLib.getLayer(i)
    print(layer_temp)
end
local temp_forward
local in_test_1 = torch.Tensor({1,2,3,4})
local temp_forward = NeuralNetworkLib.forward(in_test_1)
print(temp_forward)
local in_test_2 = torch.Tensor({{1,1,1,1};{2,1,1,2};{3,1,1,3};{4,1,1,4}})
temp_forward = NeuralNetworkLib.forward(in_test_2)
print(temp_forward)
print('test and')
print(0)
print(logicGatesLib.AND(1<0 , 1<0))
print(0)
print(logicGatesLib.AND(1<0 , 1>0))
print(0)
print(logicGatesLib.AND(1>0 , 1<0))
print(1)
print(logicGatesLib.AND(1>0 , 1>0))
print('test or')
print(0)
print(logicGatesLib.OR(1<0 , 1<0))
print(1)
print(logicGatesLib.OR(1<0 , 1>0))
print(1)
print(logicGatesLib.OR(1>0 , 1<0))
print(1)
print(logicGatesLib.OR(1>0 , 1>0))
print('test not')
print(1)
print(logicGatesLib.NOT(1<0))
print(0)
print(logicGatesLib.NOT(1>0))
print('test xor')
print(0)
print(logicGatesLib.XOR(1<0 , 1<0))
print(1)
print(logicGatesLib.XOR(1<0 , 1>0))
print(1)
print(logicGatesLib.XOR(1>0 , 1<0))
print(0)
print(logicGatesLib.XOR(1>0 , 1>0))

NeuralNetworkLib.build({3,2,1})
local temp = NeuralNetworkLib.getLayer(1)  
temp:sub(1,1,1,1):fill(1)
temp:sub(1,1,2,2):fill(0)
temp:sub(1,1,3,3):fill(1)
temp:sub(1,1,4,4):fill(1)
temp:sub(2,2,1,1):fill(0)
temp:sub(2,2,2,2):fill(1)
temp:sub(2,2,3,3):fill(0)
temp:sub(2,2,4,4):fill(0)
local temp = NeuralNetworkLib.getLayer(2)  
temp:sub(1,1,1,1):fill(1)
temp:sub(1,1,2,2):fill(1)
temp:sub(1,1,3,3):fill(1)
temp_forward = NeuralNetworkLib.forward(torch.Tensor({{1,1,1};{1,3,5};{2,4,2};{5,6,1}}))
print(temp_forward)
temp_forward = NeuralNetworkLib.forward(torch.Tensor({1,3,4,6}))
print(temp_forward)

